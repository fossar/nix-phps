# This file builds given version of PHP and pushes it to Cachix cache.
# The following secrets need to be set:
# - “CACHIX_AUTH_TOKEN” for uploading built Nix packages to Cachix
name: Build

on:
  pull_request:
  push:

jobs:
  build:
    name: 'PHP ${{ matrix.php.major }}.${{ matrix.php.minor }}'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        php:
          - major: 8
            minor: 1
          - major: 8
            minor: 0
          - major: 7
            minor: 4
          - major: 7
            minor: 3
          - major: 7
            minor: 2
          - major: 7
            minor: 1
          - major: 7
            minor: 0
          - major: 5
            minor: 6
      # We want to fix failures individually.
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v14

      - name: Set up Nix cache
        uses: cachix/cachix-action@v10
        with:
          name: fossar
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build PHP
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}

      - name: Build Imagick extension
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}.extensions.imagick

      - name: Build Redis extension
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}.extensions.redis

      - name: Build Redis 3 extension
        if: ${{ matrix.php.major < 8 }}
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}.extensions.redis3

      - name: Build MySQL extension
        if: ${{ matrix.php.major < 7 }}
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}.extensions.mysql

      - name: Build Xdebug extension
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}.extensions.xdebug

      - name: Build Tidy extension
        run: nix-build -A outputs.packages.x86_64-linux.php${{ matrix.php.major }}${{ matrix.php.minor }}.extensions.tidy

      - name: Check that composer PHAR works
        run: |
          nix-shell -E '
            let
              self = import ./.;
              composer =
                self.outputs.packages.${builtins.currentSystem}.php${{ matrix.php.major }}${{ matrix.php.minor }}.packages.composer;
              pkgs = import self.inputs.nixpkgs { };
            in
              pkgs.mkShell {
                packages = [
                  composer
                ];
              }
          ' --run "composer --version"

      - name: Validate php.extensions.mysqli default unix socket path
        run: |
          nix-shell -E '
            let
              self = import ./.;
              php =
                self.outputs.packages.${builtins.currentSystem}.php${{ matrix.php.major }}${{ matrix.php.minor }}.withExtensions
                  ({ all, ... }: [ all.mysqli ]);
              pkgs = import self.inputs.nixpkgs { };
            in
              pkgs.mkShell {
                packages = [
                  php
                ];
              }
          ' --run "php -r \"echo ini_get('mysqli.default_socket') . PHP_EOL;\" | grep /run/mysqld/mysqld.sock"

      - name: Validate php.extensions.pdo_mysql default unix socket path
        run: |
          nix-shell -E '
            let
              self = import ./.;
              php =
                self.outputs.packages.${builtins.currentSystem}.php${{ matrix.php.major }}${{ matrix.php.minor }}.withExtensions
                  ({ all, ... }: [ all.pdo_mysql ]);
              pkgs = import self.inputs.nixpkgs { };
            in
              pkgs.mkShell {
                packages = [
                  php
                ];
              }
          ' --run "php -r \"echo ini_get('pdo_mysql.default_socket') . PHP_EOL;\" | grep /run/mysqld/mysqld.sock"
